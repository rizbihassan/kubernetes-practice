drain-cordon commands

# kubectl drain node01 --ignore-daemonsets      --> moves exisiting pods to a different node and make node01 unschedulable
# kubectl uncordon node01 --> makes the node schedulable again
# kubectl cordon node01 --> makes the node unschedulable but keeps existing pods

------------------------------------------------------------------------------------------
cluster version upgrade

steps are
1) upgrade kubeadm version using "apt install kubeadm=1.19.0-00" or other version number
2) upgrade k8s cluster using "kubeadm upgrade apply v1.19.0"
3) upgrade kubelet using "apt install kubelet=1.19.0-00"

once you upgrade kubelet, use "kubectl get nodes" to see if the node got upgraded to the desired version.


-------------------------------------------------------------------------------------------------------------------
K8s backup using snapshot
command:
ETCDCTL_API=3 etcdctl \
--cacert=/etc/kubernetes/pki/etcd/ca.crt \
--cert=/etc/kubernetes/pki/etcd/server.crt \
--key=/etc/kubernetes/pki/etcd/server.key \
snapshot save /opt/snapshot-pre-boot-new.db


snapshot restore command:

ETCDCTL_API=3 etcdctl  --data-dir /var/lib/etcd-from-backup \
snapshot restore /opt/snapshot-pre-boot.db

then edit the /etc/kubernetes/manifests/etcd.yaml file and change the host "path" to /var/lib/etcd-from-backup

  - hostPath:
      path: /var/lib/etcd-from-backup
      type: DirectoryOrCreate
    name: etcd-data

    it will automatically recreate the etcd pod since it is a static pod.

    ------------------------------------------------------------------------------------------------------
    certificates
this shows details of the certificate
first copy the path of .crt by going to the specific pod and copying the path
# openssl x509 -in /etc/kubernetes/pki/etcd/server.crt -text



to see all csr, use ->
kubectl get csr
to approve a CSR named akshay, use->
kubectl certificate approve akshay

-----------------------------------------------------------------------------------------------------------------------------\
to view config file, see more /.kube/config

this command uses the config file at /root/my-kube-config and uses context research 
kubectl config --kubeconfig=/root/my-kube-config use-context research


----------------------------------------------------------------------------------------------------
                                    NETOWRKING COMMANDS
----------------------------------------------------------------------------------------------------

ip link #shows details of network
ip link show "interface-name"
arp
netstat -nplt # checks port 
netstat -anp | grep etcd
netstat -plan | grep kube-proxy



ps -aux| grep network-plugin      # to check the network config for the cluster

# to check plugin, go to 
/etc/cni/net.d/

#to check ip address range of a network plugin such as weave, check
ip addr

# to check ip range of pods in a cluster, 
check which pods are deployed related to cni 
then "kubectl logs pod-name container-name" and check the ip addr range

# to check ip range of services in a cluster, 
go to /etc/kubernetes/manifests/kube-apiserver.yaml | grep service-cluster-ip-range

----------------------------------------------------------------------------------------------------
                                    troubleshooting
----------------------------------------------------------------------------------------------------

service kube-apiserver status
service kube-controller-manager status
service kube-scheduler status
service kubelet status
service kube-proxy status

# to troubleshoot worker nodes, ssh into that node and then
cd /etc/kubernetes/pki/
journalctl -u kubelet -f
service kubelet start



----------------------------exam commands ------------------------------------------------------------------------------------------
kubectl api-resources -o wide
kubectl cluster-info --kubeconfig=/root/xxx